{"version":3,"sources":["components/Header.js","components/Search.js","components/Movie.js","components/App.js","components/App2.js","Example.js","serviceWorker.js","index.js"],"names":["Header","props","className","text","Search","onSearch","useState","keyword","setKeyword","resetInputField","value","onChange","e","target","type","onClick","preventDefault","Movie","movie","poster","Poster","Title","width","height","alt","src","Year","Type","App","loading","setLoading","movies","setMovies","totalCount","setTotalCount","errorMessage","setErrorMessage","useEffect","doSearch","fetch","buildSearchApi","then","response","json","jsonResponse","Response","totalResults","Error","map","index","key","initState","reducer","state","action","payload","error","useReducer","dispatch","isProduction","process","NoMatch","MenuLink","label","to","activeOnlyWhenExact","match","useRouteMatch","path","exact","Boolean","window","location","hostname","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be81ab0f.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = props => {\n  return (\n    <header className=\"App-header\">\n      <h2>{props.text}</h2>\n    </header>\n  )\n}\n\nexport default Header\n","import React, { useState } from 'react'\n\nconst Search = ({ onSearch }) => {\n  const [keyword, setKeyword] = useState('')\n\n  const handleSearchInputChanges = e => {\n    setKeyword(e.target.value)\n  }\n\n  const handleSearch = e => {\n    e.preventDefault();\n    onSearch(keyword)\n    resetInputField()\n  }\n\n  const resetInputField = () => {\n    setKeyword('')\n  }\n\n  return (\n    <form className=\"search\">\n      <input value={keyword} onChange={handleSearchInputChanges} type=\"text\" />\n      <button className=\"searchButton\" onClick={handleSearch}>Search</button>\n    </form>\n  )\n}\n\nexport default Search\n","import React from 'react'\n\nconst DEFAULT_PLACEHOLDER_IMAGE =\n  'https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg'\n\nconst Movie = ({ movie }) => {\n  const poster =\n    movie.Poster === 'N/A' ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster\n  return (\n    <div className=\"movie\">\n      <h2 className=\"title\">{movie.Title}</h2>\n      <div>\n        <img\n          width=\"200\"\n          height=\"300\"\n          alt={`The movie titled: ${movie.Title}`}\n          src={poster}\n        />\n      </div>\n      <p className=\"info\">\n        <span className=\"year\">({movie.Year})</span>\n        <span className=\"type\">{movie.Type}</span>\n      </p>\n    </div>\n  )\n}\n\nexport default Movie\n","import React, { useState, useEffect, Fragment } from 'react'\nimport './App.css'\nimport Header from './Header'\nimport Search from './Search'\nimport Movie from './Movie'\n\nconst buildSearchApi = (keyword = 'man') =>\n  `https://www.omdbapi.com/?s=${keyword}&apikey=4a3b711b`\n\nconst App = () => {\n  const [loading, setLoading] = useState(true)\n  const [movies, setMovies] = useState([])\n  const [totalCount, setTotalCount] = useState(0)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    doSearch()\n  }, [])\n\n  const doSearch = keyword => {\n    fetch(buildSearchApi(keyword))\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.Response === 'True') {\n          setMovies(jsonResponse.Search)\n          setTotalCount(jsonResponse.totalResults)\n          setLoading(false)\n        } else {\n          setErrorMessage(jsonResponse.Error)\n          setTotalCount(0)\n          setLoading(false)\n        }\n      })\n  }\n\n  const search = keyword => {\n    if (!keyword) {\n      setErrorMessage('Please enter search criteria')\n      return\n    }\n    setLoading(false)\n    setErrorMessage(null)\n\n    doSearch(keyword)\n  }\n\n  return (\n    <div className=\"App\">\n      <Header text=\"useState\" />\n      <Search onSearch={search} />\n      <div className=\"moviesWrapper\">\n        {loading && !errorMessage ? (\n          <span className=\"loading\">loading...</span>\n        ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          <Fragment>\n            <div className=\"total\">Total: {totalCount}</div>\n            <div className=\"movies\">\n              {movies.map((movie, index) => (\n                <Movie key={`${index}-${movie.Title}`} movie={movie} />\n              ))}\n            </div>\n          </Fragment>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React, { useReducer, useEffect } from 'react'\nimport './App.css'\nimport Header from './Header'\nimport Search from './Search'\nimport Movie from './Movie'\n\nconst buildSearchApi = (keyword = 'man') =>\n  `https://www.omdbapi.com/?s=${keyword}&page=1&apikey=4a3b711b`\n\nconst initState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'SEARCH_MOVIES_REQUEST':\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      }\n    case 'SEARCH_MOVIES_SUCCESS':\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      }\n    case 'SEARCH_MOVIES_FAILURE':\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      }\n    default:\n      return state\n  }\n}\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initState)\n\n  useEffect(() => {\n    doSearch()\n  }, [])\n\n  const doSearch = keyword => {\n    fetch(buildSearchApi(keyword))\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.Response === 'True') {\n          dispatch({\n            type: 'SEARCH_MOVIES_SUCCESS',\n            payload: jsonResponse.Search\n          })\n        } else {\n          dispatch({\n            type: 'SEARCH_MOVIES_FAILURE',\n            error: jsonResponse.Error\n          })\n        }\n      })\n  }\n\n  const search = keyword => {\n    if (!keyword) {\n      dispatch({\n        type: 'SEARCH_MOVIES_FAILURE',\n        error: 'Please enter search criteria'\n      })\n      return\n    }\n\n    // 搜索中\n    dispatch({\n      type: 'SEARCH_MOVIES_REQUEST'\n    })\n\n    doSearch(keyword)\n  }\n\n  const { movies, errorMessage, loading } = state\n\n  return (\n    <div className=\"App\">\n      <Header text=\"useReducer\" />\n      <Search onSearch={search} />\n      <p className=\"App-intro\">Sharing a few of our favourite movies</p>\n      <div className=\"movies\">\n        {loading && !errorMessage ? (\n          <span className=\"loading\">loading... </span>\n        ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          movies.map((movie, index) => (\n            <Movie key={`${index}-${movie.Title}`} movie={movie} />\n          ))\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Switch,\n  useRouteMatch\n} from 'react-router-dom'\nimport App from './components/App'\nimport AppWithReducer from './components/App2'\nimport './index.css'\n\nconst isProduction = process.env.NODE_ENV === 'production'\n\nconst NoMatch = () => <p>404</p>\n\nfunction MenuLink({ label, to, activeOnlyWhenExact }) {\n  let match = useRouteMatch({\n    path: to,\n    exact: activeOnlyWhenExact\n  })\n\n  return (\n    <div className={match ? 'active menu' : 'menu'}>\n      {match && '> '}\n      <Link to={to}>{label}</Link>\n    </div>\n  )\n}\n\nexport default function Example() {\n  return (\n    <Router basename={isProduction ? '/demo-hooks-movie-app' : '/'}>\n      <div className=\"breadcrumb\">\n        <MenuLink activeOnlyWhenExact={true} to=\"/\" label=\"useState\" />\n        <MenuLink to=\"/with-reducer\" label=\"useResucer\" />\n      </div>\n      <Switch>\n        <Route exact path=\"/\">\n          <App />\n        </Route>\n        <Route path=\"/with-reducer\">\n          <AppWithReducer />\n        </Route>\n        <Route path=\"*\">\n          <NoMatch />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Example from './Example';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Example />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}